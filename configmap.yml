apiVersion: v1
data:
  sync.py: |
    from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
    import json

    class Controller(BaseHTTPRequestHandler):
      def sync(self, parent, children):
        # Compute status based on observed state.
        desired_status = {
          "jobs": 1
        }

        # Generate the desired child object(s).
        domain = parent.get("spec", {}).get("domain", "invalid.com")
        domain_dashed = domain.replace(".","-")
        restorepoint = parent.get("spec", {}).get("restorepoint", "0000-00-00")
        desired_pods = [
          {

            "apiVersion": "batch/v1",
            "kind": "Job",
            "metadata": {
              "name": parent["metadata"]["name"],
              "namespace": domain_dashed
            },
            "spec": {
            "template": {
             "spec": {
              "containers": [
                {
                  "args": [
                    "/bin/restore-site %s" % domain
                  ],
                  "env": [
                    {
                      "name": "DATABASE_HOST",
                      "value": "%s-mysql.%s.svc" % (domain_dashed,domain_dashed)
                    },
                    {
                      "name": "DATABASE_USER",
                      "valueFrom": {
                          "secretKeyRef": {
                              "name": "%s-db-creds-secret" % domain_dashed,
                              "key": "user"
                            }
                        }
                    },
                    {
                      "name": "DATABASE_NAME",
                      "valueFrom": {
                          "secretKeyRef": {
                              "name": "%s-db-creds-secret" % domain_dashed,
                              "key": "name"
                            }
                        }
                    },
                    {
                      "name": "DATABASE_PASS",
                      "valueFrom": {
                          "secretKeyRef": {
                              "name": "%s-db-creds-secret" % domain_dashed,
                              "key": "pass"
                            }
                        }
                    },
                    {
                      "name": "BUCKET",
                      "value": "hostkraken-backup"
                    },
                    {
                      "name": "AWS_ACCESS_KEY_ID",
                      "valueFrom": {
                          "secretKeyRef": {
                              "name": "do-backup-secret",
                              "key": "access_key"
                            }
                        }
                    },
                    {
                      "name": "AWS_SECRET_ACCESS_KEY",
                      "valueFrom": {
                          "secretKeyRef": {
                              "name": "do-backup-secret",
                              "key": "secret_key"
                            }
                        }
                    },
                    {
                      "name": "SITE_NAME",
                      "value": "%s" % domain
                    },
                    {
                      "name": "RESTOREPOINT",
                      "value": "%s" % restorepoint
                    },
                    {
                      "name": "JOB_TO_DELETE",
                      "value": parent["metadata"]["name"]
                    }
                  ],
                  "image": "registry.hostkraken.com/restoresite:latest",
                  "imagePullPolicy": "Always",
                  "name": "%s-restorebackup" % domain_dashed,
                  "resources": {},
                  "securityContext": {},
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "volumeMounts": [
                    {
                      "mountPath": "/configs",
                      "name": "config-volume"
                    },
                    {
                      "mountPath": "/content",
                      "name": "wp-uploads-%s" % domain_dashed
                    },
                    {
                      "name": "do-backup-secret",
                      "mountPath": "/mnt/secrets-store",
                      "readOnly": True
                    }
                  ]
                }
              ],
              "dnsPolicy": "ClusterFirst",
              "imagePullSecrets": [
                {
                  "name": "registry-business-business"
                }
              ],
              "restartPolicy": "Never",
              "schedulerName": "default-scheduler",
              "securityContext": {},
              "serviceAccount": "default",
              "serviceAccountName": "default",
              "terminationGracePeriodSeconds": 30,
              "volumes": [
                {
                  "configMap": {
                    "defaultMode": 420,
                    "name": "%s-configmap" % domain_dashed
                  },
                  "name": "config-volume"
                },
                {
                  "name": "wp-uploads-%s" % domain_dashed,
                  "persistentVolumeClaim": {
                    "claimName": "wp-uploads-%s" % domain_dashed
                  }
                },
                {
                  "name": "do-backup-secret",
                  "csi": {
                      "driver": "secrets-store.csi.k8s.io",
                      "volumeAttributes": {
                        "secretProviderClass": "do-backup-secret"
                      },
                      "readOnly": True
                   }
                }
              ]
              }
            }
    }
          }
        ]
        return {"status": desired_status, "children": desired_pods}

      def do_POST(self):
        # Serve the sync() function as a JSON webhook.
        observed = json.loads(self.rfile.read(int(self.headers.getheader("content-length"))))
        desired = self.sync(observed["parent"], observed["children"])
        self.send_response(200)
        self.send_header("Content-type", "application/json")
        self.end_headers()
        self.wfile.write(json.dumps(desired))

    HTTPServer(("", 80), Controller).serve_forever()
kind: ConfigMap
metadata:
  name: restore-controller
